TITLE: Rakudo and Perl 6
=================
=middle
Rakudo and Perl 6

by

Gabor Szabo
http://szabgab.com/

========
=title Perl 6 vs Perl 5

=ul
Perl 6 is a <r>new dialect</r> of the Perl language family, a sibling of Perl 5.
As opposed to Perl 5, Perl 6 has a definition and can have several implementations.
Currently the most advanced implementation is called <r>Rakudo</r>.
It runs on top of the <r>Parrot</r> Virtual Machine.


=======
=title Status

=ul
Both Perl 6 and Rakudo is under heavy development.

<r>Rakudo *</r>, the first reasonably usable version of it
Planned to be relesed in the <r>next few weeks</r>

============
=title Compability

=ul
Perl 6 is not compatible with Perl 5 but there are several plans for transition

One plan is to create a Perl 5 to Perl 6 <r>translator</r>.

perl will <r>recognize</r> Perl 5 and Perl 6 <r>code</r> and use the right engine


=code perl6

use v6;


===========
=title Hello World

=code perl6

say "Hello World";

===========
=title Everything is an object

=code perl6

say "Perl 6 rocks".chars;

===========
=title Reading from STDIN, prompting

=code perl6

my $name = prompt("Please type in yourname: ");

say "Hello $name";


===========
=title Interpolation expressions

=code perl6

    my @names = ("Foo", "Bar", "Moo");
    say "Hello { join(', ', @names) } how are you?";

=ul
The output will look like this:

=code perl6
    Hello Foo, Bar, Moo how are you?


===========
=title Junctions

=ul
Instead of  

=code perl6

    if ($age == 3 or $age == 4 or $age == 5) {
    }

=ul
you will be able to write

=code perl6
    if ($age == 3|4|5) {
    }


===========
=title for loop - One element a time

=code perl6
    my @fellows = <Foo Bar Baz>;
    for @fellows -> $name {
        say $name;
    }


===========
=title for loop - Two elements a time
=code perl6

    my @phones = <Foo 123 Bar 456 Moo 789>;
    for @phones -> $name, $number {
        say "$name  $number";
    }

===========
=title for loop - Going over elements of a hash
=code perl6

    my %phone = (
        "Foo" => 123,
        "Bar" => 456,
    );

    for %phone -> $key, $value {
        say "$key $value";
    }


===========
=title Several elements at a time
=code perl6
    my @scores = <
        Valencia         1  1  Recreativo_Huelva
        Athletic_Bilbao  2  5  Real_Madrid
        Malaga  	     2  2  Sevilla_FC
        Sporting_Gijon   3  2  Deportivo_La_Coruna
     	Valladolid 	     1  0  Getafe
     	Real_Betis 	     0  0  Osasuna
     	Racing_Santander 5  0  Numancia
     	Espanyol         3  3  Mallorca
     	Atletico_Madrid  3  2  Villarreal
     	Almeria          0  2  Barcelona
    >;

    for @scores -> $home, $home_score, $guest_score, $guest {
        say "$home $guest $home_score : $guest_score";
    }

===========
=title Missing values
=code perl6
    for (1, 2, 3, 4, 5) -> $x, $y {
        say "$x $y";
    }

=ul
Will generate the following:

=pre
    1 2
    3 4
    StopIteration

=ul
But we can say the second value is optional:

=code perl6
    for (1, 2, 3, 4, 5) -> $x, $y? {
            say "$x $y";
    }


======
=title Iterating over more than one array in parallel
=code perl6
    my @chars   = <a b c>;
    my @numbers = <1 2 3>;

    for @chars Z @numbers -> $letter, $number {
        say "$letter $number";
    }

    a 1
    b 2
    c 3

====
=title Infinite lists
=code perl6

    for (1..Inf) -> $i {

    }


=title The last element of an infinite lists
=code perl6

    (1..Inf)[*-1]

=======
=title Regex

=code perl6

$code .= subst(/\</, {"&lt;"}, :g);


===========
=title Grammars


==============
=title CPAN - proto


===================
=title How to get involved?

=ul

IRC: #perl6 on freenode.net 

Mailing list

Web site:  http://perl6.org/


=================
=middle
Questions?

